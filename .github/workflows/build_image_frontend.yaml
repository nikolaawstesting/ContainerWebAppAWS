name: build and publish fe docker image

on:
  workflow_dispatch:
   inputs:
     image_tag:
       description: 'Docker image tag'
       required: true

# concurrency required to avoid terraform lock contention during ECR provisioning
concurrency: ci-${{ github.repository }}-docker-pipeline

jobs:
  build-publish:
    runs-on: ubuntu-24.04

    permissions:
      id-token: write
      contents: read

    outputs:
      image_tag: ${{ steps.build-publish.outputs.image_tag }}
      full_image: ${{ steps.build-publish.outputs.full_image }}

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ vars.aws_account_id }}:role/${{ vars.backend_iam_role }}
          aws-region: ${{ vars.aws_region }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: prepare ECR repo name
        shell: bash
        run: |
          set -eux
          # lowercase the name
          repo="${{ vars.environment_name }}-${{ vars.project_name }}-ecr-fe-01"

          # push name to env
          echo "ECR_REPO_NAME=${repo}" >> $GITHUB_ENV

      - name: TF init
        shell: bash
        run: |
          set -eux
          terraform init -upgrade -reconfigure \
            -backend-config='skip_metadata_api_check=true' \
            -backend-config='skip_region_validation=true' \
            -backend-config='skip_credentials_validation=true' \
            -backend-config='region=${{ vars.aws_region }}' \
            -backend-config='bucket=${{ vars.backend_s3_bucket }}' \
            -backend-config='key=tf/${{ env.ECR_REPO_NAME }}.tfstate' \
            -backend-config='dynamodb_table=${{ vars.ecr_infra_dynamodb_table_fe }}' \
            -backend-config='environment=${{ vars.environment_name }}' 
        #-backend-config='role_arn=arn:aws:iam::${{ vars.aws_account_id }}:role/${{ vars.backend_iam_role }}'
        working-directory: ./time-tracking-app/ecr_infra/fe_ecr

      - name: Create ECR repo [TF apply]
        shell: bash
        run: |
          set -eux
          terraform apply \
            -var 'aws_account_id=${{ vars.aws_account_id }}' \
            -auto-approve
        #-var 'iam_role=arn:aws:iam::${{ vars.aws_account_id }}:role/${{ vars.hub_iam_role }}' \
        working-directory: ./time-tracking-app/ecr_infra/fe_ecr

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{ vars.aws_account_id }}

      - name: Build, tag, and push image to Amazon ECR
        id: build-publish
        shell: bash
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPO_NAME }}
          IMAGE_TAG: ${{ inputs.image_tag }}
        run: |
          docker build "${{ vars.docker_build_dir }}" -f "${{ vars.path_to_dockerfile_fe }}" -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "IMAGE $IMAGE_TAG is pushed to $ECR_REGISTRY/$ECR_REPOSITORY"
          echo "image_tag=$IMAGE_TAG" 
          echo "full_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"